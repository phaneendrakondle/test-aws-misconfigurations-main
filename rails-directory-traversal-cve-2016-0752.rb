# CVE-2016-0752: Directory Traversal Vulnerability in Action View
# This file demonstrates the vulnerability and provides a secure implementation
# For educational and security testing purposes only

# ============================================================================
# VULNERABLE CODE (DO NOT USE IN PRODUCTION)
# ============================================================================
# This controller is vulnerable to directory traversal attacks (CVE-2016-0752)
# An attacker could provide "../../../etc/passwd" to read arbitrary files
# ============================================================================

class VulnerableController < ApplicationController
  # VULNERABLE: Accepts user input directly in render without sanitization
  # Example attack: GET /vulnerable/show?template=../../../../etc/passwd
  def show_vulnerable
    template_name = params[:template]
    
    # SECURITY ISSUE: No validation or sanitization of the template parameter
    # This allows directory traversal attacks using ".." sequences
    render template: template_name
  end
  
  # VULNERABLE: Using file path from user input
  # Example attack: GET /vulnerable/render_file?file=../../../../etc/passwd
  def render_file_vulnerable
    file_path = params[:file]
    
    # SECURITY ISSUE: Directly using user input as file path
    render file: file_path
  end
  
  # VULNERABLE: Partial rendering with unsanitized input
  # Example attack: GET /vulnerable/partial?name=../../../../etc/passwd
  def render_partial_vulnerable
    partial_name = params[:name]
    
    # SECURITY ISSUE: No validation of partial name
    render partial: partial_name
  end
end

# ============================================================================
# SECURE CODE (RECOMMENDED IMPLEMENTATION)
# ============================================================================
# This controller implements proper input validation and sanitization
# to prevent directory traversal attacks
# ============================================================================

class SecureController < ApplicationController
  # List of allowed templates - whitelist approach
  ALLOWED_TEMPLATES = [
    'welcome',
    'about',
    'contact',
    'help',
    'dashboard'
  ].freeze
  
  # List of allowed file extensions
  ALLOWED_EXTENSIONS = ['.html', '.erb', '.json', '.xml'].freeze
  
  # SECURE: Validates template name against whitelist
  def show_secure
    template_name = params[:template]
    
    # SECURITY FIX: Validate against whitelist
    unless ALLOWED_TEMPLATES.include?(template_name)
      Rails.logger.warn("Attempted access to unauthorized template: #{template_name}")
      render plain: "Unauthorized template", status: :forbidden
      return
    end
    
    render template: template_name
  end
  
  # SECURE: Sanitizes file path and restricts to application directory
  def render_file_secure
    file_path = params[:file]
    
    # SECURITY FIX: Sanitize the path to remove directory traversal sequences
    sanitized_path = sanitize_path(file_path)
    
    # SECURITY FIX: Ensure the file is within the allowed directory
    base_path = Rails.root.join('app', 'views', 'public')
    full_path = base_path.join(sanitized_path)
    
    # SECURITY FIX: Verify the resolved path is still within the base path
    unless full_path.to_s.start_with?(base_path.to_s)
      Rails.logger.warn("Directory traversal attempt detected: #{file_path}")
      render plain: "Access denied", status: :forbidden
      return
    end
    
    # SECURITY FIX: Verify file exists and has allowed extension
    unless File.exist?(full_path) && allowed_extension?(full_path)
      render plain: "File not found", status: :not_found
      return
    end
    
    render file: full_path.to_s
  end
  
  # SECURE: Validates partial name against whitelist
  def render_partial_secure
    partial_name = params[:name]
    
    # SECURITY FIX: Sanitize partial name
    sanitized_partial = sanitize_partial_name(partial_name)
    
    # SECURITY FIX: Validate against pattern (no directory traversal)
    unless valid_partial_name?(sanitized_partial)
      Rails.logger.warn("Invalid partial name detected: #{partial_name}")
      render plain: "Invalid partial name", status: :bad_request
      return
    end
    
    render partial: sanitized_partial
  end
  
  private
  
  # Sanitizes path by removing directory traversal sequences
  def sanitize_path(path)
    return '' if path.nil?
    
    # Remove any directory traversal sequences
    # This prevents attacks like "../../../etc/passwd"
    sanitized = path.to_s
    
    # Remove all occurrences of "../" and "..\"
    sanitized = sanitized.gsub(/\.\.\//, '')
    sanitized = sanitized.gsub(/\.\.\\/, '')
    
    # Remove leading slashes to prevent absolute path access
    sanitized = sanitized.gsub(/^\/+/, '')
    sanitized = sanitized.gsub(/^\\+/, '')
    
    # Remove null bytes
    sanitized = sanitized.gsub(/\x00/, '')
    
    sanitized
  end
  
  # Validates partial name (should only contain alphanumeric, underscore, dash)
  def valid_partial_name?(name)
    # Only allow safe characters in partial names
    # No slashes, dots (except for extensions), or special characters
    name =~ /\A[a-zA-Z0-9_-]+\z/
  end
  
  # Sanitizes partial name by removing unsafe characters
  def sanitize_partial_name(name)
    return '' if name.nil?
    
    # Remove directory traversal sequences
    sanitized = sanitize_path(name)
    
    # Remove any remaining path separators
    sanitized = sanitized.gsub(/[\/\\]/, '')
    
    sanitized
  end
  
  # Checks if file has an allowed extension
  def allowed_extension?(file_path)
    extension = File.extname(file_path.to_s).downcase
    ALLOWED_EXTENSIONS.include?(extension)
  end
end

# ============================================================================
# ADDITIONAL SECURITY MEASURES
# ============================================================================

# Configuration for Rails application (config/application.rb)
# Add this to enable additional security headers
class ApplicationConfig
  def self.configure_security
    # Enable additional security headers
    config.action_dispatch.default_headers = {
      'X-Frame-Options' => 'SAMEORIGIN',
      'X-Content-Type-Options' => 'nosniff',
      'X-XSS-Protection' => '1; mode=block'
    }
    
    # Configure Content Security Policy
    config.content_security_policy do |policy|
      policy.default_src :self, :https
      policy.font_src    :self, :https, :data
      policy.img_src     :self, :https, :data
      policy.object_src  :none
      policy.script_src  :self, :https
      policy.style_src   :self, :https
    end
  end
end

# ============================================================================
# TESTING RECOMMENDATIONS
# ============================================================================
# 1. Test with path traversal sequences: "../../../etc/passwd"
# 2. Test with URL-encoded sequences: "%2e%2e%2f%2e%2e%2f"
# 3. Test with double-encoded sequences
# 4. Test with null bytes: "file%00.txt"
# 5. Test with absolute paths: "/etc/passwd"
# 6. Test with Windows-style paths: "..\..\..\windows\system32\config\sam"
# 7. Test with mixed separators: "..\../..\../etc/passwd"
# 8. Verify that legitimate file access still works
# 9. Check logs for suspicious access attempts
# 10. Test with various file extensions

# ============================================================================
# RAILS CONFIGURATION RECOMMENDATIONS
# ============================================================================
# In config/routes.rb, use constraints to validate parameters:
#
# constraints(template: /[a-zA-Z0-9_-]+/) do
#   get 'show/:template', to: 'secure#show_secure'
# end
#
# In config/initializers/filter_parameter_logging.rb, filter sensitive params:
#
# Rails.application.config.filter_parameters += [:password, :secret, :token, :file, :template]
#
# Use Rails built-in sanitization helpers:
# - ActionView::Helpers::SanitizeHelper
# - Rails.application.config.action_controller.permit_all_parameters = false
