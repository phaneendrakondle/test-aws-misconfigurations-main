# Test Suite for CVE-2016-0752 Directory Traversal Vulnerability
# This file contains RSpec tests for validating the security fix
# Run with: rspec rails-directory-traversal-cve-2016-0752_spec.rb

require 'rails_helper'

RSpec.describe 'CVE-2016-0752 Directory Traversal Prevention', type: :controller do
  
  # Mock VulnerableController for testing
  controller(ApplicationController) do
    include VulnerableController
  end
  
  describe 'VulnerableController (Demonstrating the Vulnerability)' do
    describe 'GET #show_vulnerable' do
      it 'is vulnerable to basic directory traversal' do
        # This test demonstrates the vulnerability - should fail in production
        get :show_vulnerable, params: { template: '../../../../etc/passwd' }
        # In vulnerable code, this would attempt to render /etc/passwd
        expect(response).to be_successful
      end
      
      it 'is vulnerable to URL-encoded traversal' do
        get :show_vulnerable, params: { template: '%2e%2e%2f%2e%2e%2fetc%2fpasswd' }
        expect(response).to be_successful
      end
      
      it 'is vulnerable to Windows-style traversal' do
        get :show_vulnerable, params: { template: '..\\..\\..\\windows\\system32\\config' }
        expect(response).to be_successful
      end
      
      it 'is vulnerable to null byte injection' do
        get :show_vulnerable, params: { template: '../../../../etc/passwd%00.html' }
        expect(response).to be_successful
      end
    end
  end
  
  # Mock SecureController for testing the fix
  controller(ApplicationController) do
    include SecureController
  end
  
  describe 'SecureController (Implementing the Fix)' do
    describe 'GET #show_secure' do
      context 'with malicious input' do
        it 'prevents basic directory traversal' do
          get :show_secure, params: { template: '../../../../etc/passwd' }
          expect(response).to have_http_status(:forbidden)
          expect(response.body).to include('Unauthorized template')
        end
        
        it 'prevents URL-encoded traversal' do
          get :show_secure, params: { template: '%2e%2e%2f%2e%2e%2fetc%2fpasswd' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents Windows-style traversal' do
          get :show_secure, params: { template: '..\\..\\..\\windows\\system32' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents absolute path access' do
          get :show_secure, params: { template: '/etc/passwd' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents null byte injection' do
          get :show_secure, params: { template: '../../../../etc/passwd%00' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents templates with slashes' do
          get :show_secure, params: { template: 'admin/secrets' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents templates not in whitelist' do
          get :show_secure, params: { template: 'unauthorized_template' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'logs security violations' do
          expect(Rails.logger).to receive(:warn).with(/Attempted access to unauthorized template/)
          get :show_secure, params: { template: '../../../../etc/passwd' }
        end
      end
      
      context 'with valid input' do
        SecureController::ALLOWED_TEMPLATES.each do |valid_template|
          it "allows whitelisted template: #{valid_template}" do
            get :show_secure, params: { template: valid_template }
            expect(response).to be_successful
          end
        end
      end
    end
    
    describe 'GET #render_file_secure' do
      let(:base_path) { Rails.root.join('app', 'views', 'public') }
      
      before do
        # Create test directory structure
        FileUtils.mkdir_p(base_path)
        File.write(base_path.join('test.html'), '<h1>Test Content</h1>')
        File.write(base_path.join('test.json'), '{"data": "test"}')
      end
      
      after do
        # Clean up test files
        FileUtils.rm_rf(base_path)
      end
      
      context 'with malicious input' do
        it 'prevents traversal outside base directory' do
          get :render_file_secure, params: { file: '../../../../etc/passwd' }
          expect(response).to have_http_status(:forbidden)
          expect(response.body).to include('Access denied')
        end
        
        it 'prevents absolute path access' do
          get :render_file_secure, params: { file: '/etc/passwd' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents Windows absolute paths' do
          get :render_file_secure, params: { file: 'C:\\Windows\\System32\\config\\sam' }
          expect(response).to have_http_status(:forbidden)
        end
        
        it 'prevents symlink attacks' do
          # Create symlink to sensitive file
          symlink_path = base_path.join('evil_link')
          File.symlink('/etc/passwd', symlink_path) rescue nil
          
          get :render_file_secure, params: { file: 'evil_link' }
          expect(response).to have_http_status(:forbidden)
          
          FileUtils.rm_f(symlink_path)
        end
        
        it 'blocks files with disallowed extensions' do
          File.write(base_path.join('script.sh'), '#!/bin/bash\necho "evil"')
          
          get :render_file_secure, params: { file: 'script.sh' }
          expect(response).to have_http_status(:not_found)
          
          FileUtils.rm_f(base_path.join('script.sh'))
        end
        
        it 'logs directory traversal attempts' do
          expect(Rails.logger).to receive(:warn).with(/Directory traversal attempt detected/)
          get :render_file_secure, params: { file: '../../../../etc/passwd' }
        end
      end
      
      context 'with valid input' do
        it 'allows access to files in base directory with allowed extensions' do
          get :render_file_secure, params: { file: 'test.html' }
          expect(response).to be_successful
          expect(response.body).to include('Test Content')
        end
        
        it 'allows JSON files' do
          get :render_file_secure, params: { file: 'test.json' }
          expect(response).to be_successful
        end
        
        it 'returns 404 for non-existent files' do
          get :render_file_secure, params: { file: 'nonexistent.html' }
          expect(response).to have_http_status(:not_found)
        end
      end
    end
    
    describe 'GET #render_partial_secure' do
      context 'with malicious input' do
        it 'prevents directory traversal in partial names' do
          get :render_partial_secure, params: { name: '../../../admin/secrets' }
          expect(response).to have_http_status(:bad_request)
          expect(response.body).to include('Invalid partial name')
        end
        
        it 'prevents path separators in partial names' do
          get :render_partial_secure, params: { name: 'admin/secret_partial' }
          expect(response).to have_http_status(:bad_request)
        end
        
        it 'prevents special characters' do
          get :render_partial_secure, params: { name: 'partial; rm -rf /' }
          expect(response).to have_http_status(:bad_request)
        end
        
        it 'logs invalid partial name attempts' do
          expect(Rails.logger).to receive(:warn).with(/Invalid partial name detected/)
          get :render_partial_secure, params: { name: '../../../secrets' }
        end
      end
      
      context 'with valid input' do
        it 'allows simple alphanumeric partial names' do
          get :render_partial_secure, params: { name: 'header' }
          expect(response).to be_successful
        end
        
        it 'allows partial names with underscores' do
          get :render_partial_secure, params: { name: 'user_profile' }
          expect(response).to be_successful
        end
        
        it 'allows partial names with dashes' do
          get :render_partial_secure, params: { name: 'nav-menu' }
          expect(response).to be_successful
        end
      end
    end
    
    describe '#sanitize_path' do
      let(:controller) { SecureController.new }
      
      it 'removes .. sequences' do
        expect(controller.send(:sanitize_path, '../../../etc/passwd')).not_to include('..')
      end
      
      it 'removes leading slashes' do
        expect(controller.send(:sanitize_path, '/etc/passwd')).not_to start_with('/')
      end
      
      it 'removes backslashes' do
        expect(controller.send(:sanitize_path, '..\\..\\windows')).not_to include('\\')
      end
      
      it 'removes null bytes' do
        result = controller.send(:sanitize_path, "file\x00.txt")
        expect(result).not_to include("\x00")
      end
      
      it 'handles nil input' do
        expect(controller.send(:sanitize_path, nil)).to eq('')
      end
      
      it 'preserves valid file names' do
        expect(controller.send(:sanitize_path, 'valid_file.html')).to eq('valid_file.html')
      end
      
      it 'handles incomplete sanitization attempts (....// pattern)' do
        result = controller.send(:sanitize_path, '....//....//etc/passwd')
        expect(result).not_to include('..')
        expect(result).not_to include('//')
      end
      
      it 'handles mixed traversal patterns' do
        result = controller.send(:sanitize_path, '../.\\./../etc/passwd')
        expect(result).not_to include('..')
      end
      
      it 'handles URL-encoded traversal' do
        result = controller.send(:sanitize_path, '..%2f..%2fetc%2fpasswd')
        expect(result).not_to include('..')
      end
    end
    
    describe '#valid_partial_name?' do
      let(:controller) { SecureController.new }
      
      it 'accepts alphanumeric names' do
        expect(controller.send(:valid_partial_name?, 'header123')).to be true
      end
      
      it 'accepts names with underscores' do
        expect(controller.send(:valid_partial_name?, 'user_profile')).to be true
      end
      
      it 'accepts names with dashes' do
        expect(controller.send(:valid_partial_name?, 'nav-menu')).to be true
      end
      
      it 'rejects names with dots' do
        expect(controller.send(:valid_partial_name?, '../admin')).to be false
      end
      
      it 'rejects names with slashes' do
        expect(controller.send(:valid_partial_name?, 'admin/secret')).to be false
      end
      
      it 'rejects names with special characters' do
        expect(controller.send(:valid_partial_name?, 'file;rm -rf')).to be false
      end
    end
    
    describe '#allowed_extension?' do
      let(:controller) { SecureController.new }
      
      SecureController::ALLOWED_EXTENSIONS.each do |ext|
        it "allows #{ext} extension" do
          expect(controller.send(:allowed_extension?, "file#{ext}")).to be true
        end
      end
      
      it 'rejects .sh extension' do
        expect(controller.send(:allowed_extension?, 'script.sh')).to be false
      end
      
      it 'rejects .exe extension' do
        expect(controller.send(:allowed_extension?, 'malware.exe')).to be false
      end
      
      it 'rejects .rb extension' do
        expect(controller.send(:allowed_extension?, 'code.rb')).to be false
      end
      
      it 'is case insensitive' do
        expect(controller.send(:allowed_extension?, 'file.HTML')).to be true
      end
    end
  end
  
  describe 'Integration Tests' do
    it 'ensures secure controller is used in routes' do
      # Verify that routes use the secure controller
      expect(Rails.application.routes.routes.map(&:defaults)).to include(
        hash_including(controller: 'secure')
      )
    end
    
    it 'has appropriate route constraints' do
      # Verify that routes have constraints
      route = Rails.application.routes.routes.find do |r|
        r.defaults[:controller] == 'secure' && r.defaults[:action] == 'show_secure'
      end
      
      expect(route.constraints).to be_present if route
    end
  end
  
  describe 'Security Headers' do
    before do
      get :show_secure, params: { template: 'welcome' }
    end
    
    it 'sets X-Frame-Options header' do
      expect(response.headers['X-Frame-Options']).to eq('SAMEORIGIN')
    end
    
    it 'sets X-Content-Type-Options header' do
      expect(response.headers['X-Content-Type-Options']).to eq('nosniff')
    end
    
    it 'sets X-XSS-Protection header' do
      expect(response.headers['X-XSS-Protection']).to eq('1; mode=block')
    end
  end
  
  describe 'Performance Tests' do
    it 'validates input efficiently' do
      start_time = Time.now
      1000.times do
        get :show_secure, params: { template: 'welcome' }
      end
      duration = Time.now - start_time
      
      # Should complete 1000 requests in reasonable time
      expect(duration).to be < 10.0
    end
  end
end

# Additional test helpers
module TestHelpers
  def self.generate_traversal_payloads
    [
      '../../../etc/passwd',
      '..\\..\\..\\windows\\system32',
      '%2e%2e%2f%2e%2e%2fetc%2fpasswd',
      '%252e%252e%252f',
      '/etc/passwd',
      'C:\\Windows\\System32',
      "file\x00.txt",
      '....//....//....//etc/passwd',
      '..;/..;/..;/etc/passwd',
      '../../../../../../../../../../etc/passwd',
      '..\/..\/..\/etc/passwd'
    ]
  end
  
  def self.generate_valid_filenames
    [
      'welcome.html',
      'about.erb',
      'contact.json',
      'api_docs.xml',
      'user-profile.html',
      'nav_menu.erb'
    ]
  end
end
